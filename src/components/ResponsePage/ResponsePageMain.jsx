// frontend/src/pages/ResponsePageMain.jsx
import { useState, useEffect } from "react";
import { Link, useParams, useNavigate, useLocation } from "react-router-dom";
import axiosInstance from "../../utils/axiosInstance";
import fileDownload from "js-file-download";
import { toast } from "react-hot-toast";
import "./ResponsePageMain.css";

// label maps --------------------------------------------------
const workFormatLabels = {
    ON_SITE: "–û—Ñ–∏—Å",
    REMOTE: "–£–¥–∞–ª—ë–Ω–Ω–æ",
    HYBRID: "–ì–∏–±—Ä–∏–¥",
    FIELD_WORK: "–†–∞–∑—ä–µ–∑–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
};

const statusOptions = [
    { value: "NOT_VIEWED", label: "–Ω–µ —Ä–∞–∑–æ–±—Ä–∞–Ω", className: "response-page__status-option--not-sorted" },
    { value: "REJECTED", label: "–æ—Ç–∫–ª–æ–Ω—ë–Ω", className: "response-page__status-option--rejected" },
    { value: "APPROVED", label: "–æ–¥–æ–±—Ä–µ–Ω", className: "response-page__status-option--approved" },
    { value: "INTERVIEW_CONFIRMED", label: "–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞", className: "response-page__status-option--meeting" },
    { value: "CLOSED", label: "–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ", className: "response-page__status-option--archived" },
];

// helpers -----------------------------------------------------
const calcAge = (d) => {
    const bd = new Date(d);
    const now = new Date();
    let a = now.getFullYear() - bd.getFullYear();
    const m = now.getMonth() - bd.getMonth();
    if (m < 0 || (m === 0 && now.getDate() < bd.getDate())) a--;
    return a;
};

const clean = (val) => (val ? val.trim() : "");

const ResponsePageMain = () => {
    // ---------- routing ----------
    const { id } = useParams();
    const navigate = useNavigate();
    const { search } = useLocation();
    const returnTab = new URLSearchParams(search).get("tab") || "not-sorted";

    // ---------- state ----------
    const [candidate, setCandidate] = useState(null);
    const [loading, setLoading] = useState(true);
    const [statusOpen, setStatusOpen] = useState(false);
    const [selectedStatus, setSelectedStatus] = useState("");
    const [notes, setNotes] = useState("");
    const [originalStatus, setOriginalStatus] = useState("");

    // ---------- adapt dto ‚Üí ui ----------
    const adapt = (data) => {
        const position = clean(data.desired_role) || clean(data.vacancy?.title) || "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å";
        const description = clean(data.letter);
        const tags = [
            ...(data.vacancy?.areas || []),
            ...(data.vacancy?.work_formats?.map((w) => workFormatLabels[w] || w) || []),
        ];
        return {
            ...data,
            position,
            description,
            resumeLink: data.resume_file || data.resume_url || "#", // file has –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            tags,
            candidateExperience: data.experience === 0 ? "–ë–µ–∑ –æ–ø—ã—Ç–∞" : `${data.experience} –ª–µ—Ç`,
            time: new Date(data.created_at).toLocaleTimeString(),
            date: new Date(data.created_at).toLocaleDateString(),
            age: calcAge(data.birth_date),
        };
    };

    // ---------- fetch ----------
    useEffect(() => {
        (async () => {
            setLoading(true);
            try {
                const { data } = await axiosInstance.get(`candidate/response/${id}`);
                const c = adapt(data);
                setCandidate(c);
                setSelectedStatus(data.status);
                setOriginalStatus(data.status);
                setNotes(data.notes || "");
            } catch (e) {
                toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∫–ª–∏–∫");
                setCandidate(null);
            } finally {
                setLoading(false);
            }
        })();
    }, [id]);

    // ---------- actions ----------
    const save = async () => {
        try {
            await axiosInstance.patch(`candidate/response/${id}`, { status: selectedStatus, notes });
            toast.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ üëç");
            const backTab = selectedStatus !== originalStatus ? selectedStatus : returnTab;
            navigate(`/vacancies-responses?tab=${backTab}`);
        } catch (e) {
            toast.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
        }
    };

    const copyLink = async () => {
        try {
            await navigator.clipboard.writeText(candidate.resumeLink);
            toast.success("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Äüìã");
        } catch {
            toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É");
        }
    };

    const downloadResume = async () => {
        try {
            const res = await axiosInstance.get(candidate.resumeLink, { responseType: "blob" });
            const filename = decodeURIComponent(candidate.resumeLink.split("/").pop());
            fileDownload(res.data, filename);
            toast.success("–†–µ–∑—é–º–µ —Å–∫–∞—á–∞–Ω–æ‚¨áÔ∏è");
        } catch (e) {
            toast.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—é–º–µ");
        }
    };

    // ---------- ui helpers ----------
    const statusName = (v) => statusOptions.find((o) => o.value === v)?.label || "–Ω–µ —Ä–∞–∑–æ–±—Ä–∞–Ω";
    const statusClass = (v) => statusOptions.find((o) => o.value === v)?.className || "";

    // ---------- render ----------
    if (loading) return <div className="response-page__loading">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>;
    if (!candidate) return <div className="response-page__error">–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;

    return (
        <main className="response-page__main">
            <div className="response-page__container">
                <Link to={`/vacancies-responses?tab=${returnTab}`} className="response-page__back-link">
                    ‚Üê
                </Link>

                {/* header */}
                <div className="response-page__header">
                    <div className="response-page__meta">
                        <div className="response-page__tags">
                            {candidate.tags.map((t, i) => (
                                <span key={i} className="response-page__tag">
                                    {t}
                                </span>
                            ))}
                        </div>
                        <h1 className="response-page__title">{candidate.position}</h1>
                        <p className="response-page__description">{candidate.description}</p>
                    </div>

                    <div className="response-page__datetime">
                        <span>–û—Ç–∫–ª–∏–∫ –≤</span>
                        <div className="response-page__time-date">
                            <span className="response-page__time">{candidate.time}</span>
                            <span className="response-page__date">{candidate.date}</span>
                        </div>
                    </div>
                </div>

                {/* content */}
                <div className="response-page__content">
                    {/* left column */}
                    <div className="response-page__left-column">
                        <div className="response-page__candidate-info">
                            <h2 className="response-page__candidate-name">
                                {candidate.name}, {candidate.age} –ª–µ—Ç
                            </h2>
                            <p className="response-page__candidate-email">{candidate.email}</p>
                            <p className="response-page__candidate-phone">{candidate.phone}</p>
                            <p
                                className={`response-page__candidate-experience ${candidate.candidateExperience === "–ë–µ–∑ –æ–ø—ã—Ç–∞" ? "response-page__candidate-experience--none" : ""
                                    }`}
                            >
                                {candidate.candidateExperience}
                            </p>
                        </div>

                        <div className="response-page__resume-actions">
                            <button onClick={downloadResume} className="response-page__download-button">
                                –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—é–º–µ
                            </button>
                            <button onClick={copyLink} className="response-page__resume-link">
                                –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
                            </button>
                        </div>

                        {!!candidate.additionalInfo && (
                            <div className="response-page__additional-info">
                                <h3 className="response-page__section-title">–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</h3>
                                <p className="response-page__additional-text">{candidate.additionalInfo}</p>
                            </div>
                        )}
                    </div>

                    {/* right column */}
                    <div className="response-page__right-column">
                        {/* status */}
                        <div className="response-page__status-section">
                            <h3 className="response-page__section-title">–°—Ç–∞—Ç—É—Å</h3>
                            <div className="response-page__status-dropdown">
                                <button
                                    className={`response-page__status-button ${statusClass(selectedStatus)}`}
                                    onClick={() => setStatusOpen((o) => !o)}
                                >
                                    {statusName(selectedStatus)} <span className="response-page__dropdown-arrow">‚ñº</span>
                                </button>

                                {statusOpen && (
                                    <div className="response-page__status-options">
                                        {statusOptions.map((o) => (
                                            <button
                                                key={o.value}
                                                className={`response-page__status-option ${o.className}`}
                                                onClick={() => {
                                                    setSelectedStatus(o.value);
                                                    setStatusOpen(false);
                                                }}
                                            >
                                                {o.label}
                                            </button>
                                        ))}
                                    </div>
                                )}
                            </div>
                        </div>

                        {/* notes */}
                        <div className="response-page__notes-section">
                            <h3 className="response-page__section-title">–ó–∞–º–µ—Ç–∫–∞</h3>
                            <textarea
                                className="response-page__notes-textarea"
                                value={notes}
                                onChange={(e) => setNotes(e.target.value)}
                                placeholder="–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ‚Ä¶"
                            />
                        </div>

                        <button className="response-page__save-button" onClick={save}>
                            —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        </main>
    );
}

export default ResponsePageMain;